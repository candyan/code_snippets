httpmlib reference

Datatypes
Low level network functions
High level network functions
Error Handling
User authorization
Various
License
Changelog

------------------------------------------------------------------------------

Datatypes

  There are 4 datatypes, one should know of, if one wants to use this
  library:

    http_data_t

       This is simply a name-value-pair:
          typedef struct {
            char *name;
            char *value;
          } http_data_t;
       Two of the other types hold NULL-terminated arrays of http_data. There
       are the following functions to manipulate http_data_t

       void free_http_data (http_data_t *d);
       http_data_t *new_http_data (const char *name, const char *value);
       http_data_t *http_data_from_line (char *line);
         This parses lines of the form "name: value" as they are returned in
         the header from the server.
       void add_http_data_to_array (http_data_t ***array, http_data_t *data);
         adds data to the NULL-terminated array *array. The data is not 
         copied, but the pointer it written into the array.
       void fprintf_http_data_array (FILE *f, http_data_t **d);
       char *http_get_value_by_name (http_data_t **d, const char *name);
         returns a pointer the the value corresponding to name, or NULL, if
         nothing was found. The search is caseinsensitive.


    http_request_t
  
       This type holds all the data, which is transfered to the server during
       a request:
          typedef struct {
            char *method;
            char *file;
            char *http_version;
            char *host;
            http_data_t **data; /* NULL terminated array of data */
          } http_request_t;
      method is "GET" or "HEAD" or what else.
      file is the filename requested starting with '/'. For some methods it 
         may be NULL.
      host: the host to be asked.
      data: a NULL terminated array of http_data_t*. (e.g. "user-agent: ..."

      The following function manipulate the http_request_t

      void free_http_request (http_request_t *r);
      http_request_t *new_http_request (const char *method, const char *file,
                                const char *http_version, const char *host);
        allocates a new http-request with the given data. method and host are
        obligatory, file may be NULL. If http_version is NULL, 1.0 is used.
        May return NULL in case of an error.
      void http_request_add_data (http_request_t *r, const char *name, 
                                  const char *value);
        adds the data "name: value" (or "name" if value is NULL) to the 
        http_request r.


   http_connection_t

      This type holds the filedescriptors and input and output streams after
      a connection to the server was established.
         typedef struct {
           FILE *in, *out;  /* streams for reading and writing */
           int fdin, fdout; /* the corresponding filedescs */
           unsigned short int port;
           int timeout;     /* seconds for timeout */
         } http_connection_t;
      timeout is in seconds. It is used, when the connection is created, and
      if it is read from the connection.
      After a GET the user may read from in.


   http_response_t

     This type hold the header information, the server has given after a 
     command. For some methods additional content follows.
        typedef struct {
          int code;
          char *reason;
          char *http_version;
          http_data_t **data;
        } http_response_t;
     code: return code of the server (e.g. 400 for "file not found")
     reason: After the return code the server gives a short explanation, e.g.
        the "file not found" from above. This is the reason.
     data: a NULL terminated array of http_data_t with possibly further
        information (e.g. about relocation of files).

     The following function manipulate this type:

     void fprintf_http_response (FILE *f, const http_response_t *r);
     void free_http_response (http_response_t *r);
     http_response_t *parse_http_response (http_connection_t *c, 
                                           char **err_msg)
       This function takes an open http_connection and expects, that the
       command was already sent (e.g. with http_send_request). It reads the
       header lines of the server and returns them in a new allocated
       http_response_t*, or NULL, if an error occured during reading.



Low level network functions

   http_connection_t *http_connect (const char *host, unsigned short int port,
                                    char **err_msg, int timeout);
      tries to connect to host host on port port and returns the connection
      in a new allocated http_connection_t*, or NULL, if it fails.
      If port==0, the HTTP_DEFAULT_PORT (80) is used.
      for err_msg s. below!
      timeout is the timeout in seconds. If it is 0, no timeout is set. If it
         is -1, the HTTP_DEFAULT_TIMEOUT from the header file is used.

   void http_close (http_connection_t *c);
      closes a connection an frees memory allocated by c.

   int http_send_request (http_connection_t *c, http_request_t *r);
      sends a request over an existing network connection. Returns 0, or
      -1, if the function wasn't able to write to the stream.


High level network functions

   The following functions all implement a certain HTTP method. The 
   _1-function only differ in taking an URI-string as 
   "http://www.somewhere.de/sub/main.html" or "www.crap.com:8080" instead
   of host, file, port...
   For the timeout cmp. http_connect!

   http_connection_t *http_get (const char *host, const char *file, 
                                unsigned short int port, char **err_msg,
                                http_response_t **response, int timeout);
   http_connection_t *http_get_1 (const char *URI, char **err_msg, 
                                  http_response_t **response, int timeout);
      On success these functions return an open http_connection. The header
      of the server response is returned (new allocated) in *response (if
      response!=NULL). The data of the file requested follows and the user
      must read it from the in-element of the connection returned.
      An error message is generated, if the response code of the server was
      !=200.

   http_response_t *http_head  (const char *host, const char *file, 
                                unsigned short int port, char **err_msg, 
                                int timeout);
   http_response_t *http_head_1 (const char *URI, char **err_msg, int timeout);
      An error message is generated, if the response code of the server was
      !=200.


Error Handling

   Some functions take an argument char **err_msg. If this is !=NULL, in
   *err_msg will be returned a new allocated error message, ending with a 
   newline (\n), if an error occured. 
   In some cases, the error message can contain more than one line.
   The user is responsible for freeing the memory allocated by the *err_msg.

   More precisely the error message is added to the string already contained
   in *err_msg and the memory allocated for the old string is freed. As a
   consequence you must never pass a const char*, as e.g.
      msg = "Errors: ";
      http_connect (...., &msg,...);
   This will give a segmentation fault.

User authorization

   is possible with this library, but not very practical, because the high
   level API functions don't take user and password as arguments. As a
   consequence low level network functions have to be used. Here is an
   example code (without error checking) for a HEAD method with user
   authentication:

       http_connection_t *c;
       http_request_t *req;
       http_response_t *res;

       req = new_http_request ("HEAD", "/", "1.0", "myhost.de");
       http_request_add_authentication (req, "myaccount", "tOpsEcret");

       c = http_connect ("myhost.de", 0, NULL, 0);
       http_send_request (c, req);
       res = parse_http_response (c, NULL);
       http_close (c);

Various

   Thread-safety
      The library should be absolute thread safe, if the _REENTRANT-macro is
      used. Maybe I overlooked some not-reentrant networking function.

   Other functions

      int http_parse_link (const char *URI, char **host, char **file,
                           unsigned short int *port);
        This function splits an URI like 
          "http://www.somewhere.de:8080/sub1/index.html" into its parts and 
        gives them back in the new allocated strings.


License

   This file is under the BSD license. It may be used freely for free or for
   commercial program.


Changelog

   20.12.2002 created
              version 0.1
    6. 1.2003 added newlines to some error messages.
              additions to the reference file.
              version 0.2
    9. 8.2004 bugfix: wrong error testing in http_connect (reentrant version)
              version 0.3
   29.10.2004 bugfix by Antonio <luisantoniog@teleline.es>: memory leak in
              free_http_response and free_http_request.
              version 0.4


21.12.2002 Michael Becker<michael.www@ijon.de>


